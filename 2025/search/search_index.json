{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the OWASP Non-Human Identity (NHI) Top 10 - 2025!</p> <p>This project outlines the top 10 risks associated with non-human identities (NHIs) for application developers. With NHIs becoming vital in development pipelines, understanding these risks is critical.</p> <p>The list was compiled by identifying key risks organizations face with NHIs and ranking them using the OWASP Risk Rating Methodology. Data sources included real-world breaches, surveys, CVE databases, and more. For details on our process, see Ranking Criteria and Methodology and Data.</p> <p>Start with the project's Introduction, and explore the OWASP Non-Human Identity Top 10 - 2025 for an overview of the risks.</p> <p>Contributions are welcome! See our Contributing Guidelines to get involved and help improve the project.</p>"},{"location":"1-improper-offboarding/","title":"NHI1:2025 Improper Offboarding","text":"Threat Agents &amp; Attack Vectors Security Weakness Impact Exploitability: Easy Prevalence: WidespreadDetectability: Hard Technical Impact: Severe Exploiting an improperly offboarded NHI greatly depends on context. Considering the case of an inside threat, it\u2019s quite simple to identify what necessary credentials are needed to exploit the improperly offboarded identity. The current capabilities of offboarding NHIs, such as service accounts, are lackluster, and organizations rarely use existing possibilities. Thus, many NHIs are not properly offboarded after they are no longer needed or once the original owner has left.Security teams are lacking tools to detect old NHIs that were not properly offboarded. Existing techniques of detecting such NHIs rely on incomplete information that takes a long time to compile. Due to the deep insight a potential inside threat has of the organization, exploiting improperly offboarded NHIs could lead to compromise of critical systems, exfiltration of sensitive data and usage of advanced persistence methods."},{"location":"1-improper-offboarding/#description","title":"Description","text":"<p>Improper offboarding refers to the inadequate deactivation or removal of non-human identities (NHIs) such as service accounts and access keys when they are no longer needed. This situation often arises when applications are deprecated, services are taken offline, or when the original owners or administrators of these NHIs leave the organization. Failure to properly offboard NHIs poses significant security risks. Unmonitored and deprecated services may remain vulnerable, and their associated NHIs can be exploited by attackers to gain unauthorized access to sensitive systems and data. Additionally, orphaned NHIs may retain elevated permissions, amplifying the potential damage from any security breach.</p>"},{"location":"1-improper-offboarding/#example-attack-scenarios","title":"Example Attack Scenarios","text":"<ul> <li>Orphaned Kubernetes Service Accounts: A Kubernetes cluster belonging to a decommissioned service retains active service accounts. If an attacker gains access to this unmonitored cluster, they could exploit these service accounts to interact with other resources within the organization's infrastructure, potentially leading to data exfiltration or further compromise.</li> <li>Ex-Employee Exploiting Unrevoked Credentials: An employee who managed automated services leaves the organization, but the NHIs associated with those services are not disabled or transferred. The ex-employee could misuse still-valid credentials to access the organization's systems remotely, leading to unauthorized data access, service disruptions, or even sabotage.</li> <li>Leftover Apps Used for Privilege Escalation &amp; Lateral Movement: An application created in a test environment, designated to test a workload, is later connected to a sensitive production environment to complete the testing suite, and is not decommissioned once the workload is transferred to run in a production server. Then, an attack reaching the less secure test environment can use this application to move laterally within the organization.</li> </ul>"},{"location":"1-improper-offboarding/#how-to-prevent","title":"How to Prevent","text":"<ul> <li>Implement an offboarding process that reviews all NHIs associated with the departing employee. For each NHI, determine if it is still required. If not, decommission it; otherwise, transfer ownership to another employee and rotate any credentials the departing employee may have had access to during its creation.</li> <li>Automate offboarding steps wherever possible by integrating HR systems with identity and access management (IAM) tools.</li> <li>Regularly audit active NHIs to identify ongoing human usage and block potential misuse.</li> </ul>"},{"location":"1-improper-offboarding/#references","title":"References","text":"<ul> <li>Cloud Security Alliance: Decommissioning Orphaned and Stale Non-Human Identities</li> <li>Ex-Employee Accessed Former Company's System and Deleted Resources</li> <li>Microsoft Breach by Midnight Blizzard Threat Actor</li> </ul>"},{"location":"1-improper-offboarding/#data-points","title":"Data Points","text":"<ul> <li>CSA NHI Report - 31% answers put insufficient NHI offboarding as one of the top 3 most concerning NHI threats. (5/10)</li> <li>CSA NHI Report - 32% of times orphaned identities were the cause for NHI-related security incidents. (4/10)</li> <li>CSA NHI Report - 15% of organizations need automated provisioning and de-provisioning as the most important capability of an NHI tool. (9/16)</li> <li>CSA NHI Report - 51% of organizations have no formal process to offboard or revoke long lived API keys.</li> <li>Recent Breach - Microsoft Breach</li> </ul>"},{"location":"10-human-use-of-nhi/","title":"NHI10:2025 Human Use of NHI","text":"<p>TBA</p>"},{"location":"2-secret-leakage/","title":"NHI2:2025 Secret Leakage","text":"<p>TBA</p>"},{"location":"3-vulnerable-third-party-nhi/","title":"NHI3:2025 Vulnerable Third-Party NHI","text":"<p>TBA</p>"},{"location":"4-insecure-authentication/","title":"NHI4:2025 Insecure Authentication","text":"Threat Agents &amp; Attack Vectors Security Weakness Impact Exploitability: Easy Prevalence: WidespreadDetectability: Easy Technical Impact: ModerateBusiness: Specific Once an attacker detects an NHI using insecure authentication, they can utilize known techniques and tools to abuse and compromise the NHI. Legacy applications are present in almost every authorization and usually use the legacy/insecure authentication methods like the implicit OAuth flow, or a service account without MFA.Depending on the type of insecure authentication, detectability can vary between available simple discovery capabilities, to specific insecure authentication offenders that are difficult to identify. Insecure protocols are commonly used to facilitate sensitive processes that are given high access. Successful exploitation of an NHI using insecure authentication can lead to account takeover or privilege escalation."},{"location":"4-insecure-authentication/#description","title":"Description","text":"<p>Developers frequently integrate internal and external (third-party) services into their SaaS applications and cloud environments to enhance their experience or facilitate operation. These services require access to resources within these systems, necessitating authentication credentials. Multiple authentication methods are available across various platforms, and developers must judiciously select the most secure and appropriate option for their specific use case. However, some authentication methods are deprecated, vulnerable to known attacks, or considered weak due to outdated security practices. Utilizing insecure or obsolete authentication mechanisms can expose organizations to significant risks, including unauthorized access, data breaches, and compliance violations. It is imperative for developers and organizations to evaluate all available authentication options, adhere to industry best practices, and choose methods that provide robust security features and adherence to standardized protocols like OAuth 2.1 and OpenID Connect (OIDC).</p>"},{"location":"4-insecure-authentication/#example-attack-scenarios","title":"Example Attack Scenarios","text":"<ul> <li>Deprecated OAuth Flows: Certain flows from earlier OAuth versions (OAuth 1.0 and OAuth 2.0) have been deprecated due to security vulnerabilities. For example:<ul> <li>Implicit Flow: Commonly used for single-page applications, it is now discouraged because it exposes access tokens in the URL, making them susceptible to interception and replay attacks.</li> <li>Authorization Code Flow without PKCE: Vulnerable to interception and Cross-Site Request Forgery (CSRF) attacks. Modern implementations should use the Proof Key for Code Exchange (PKCE) extension to enhance security.</li> </ul> </li> <li>Non-Standard OAuth Implementations: Some platforms deviate from official OAuth standards by implementing custom behaviors, such as converting access tokens into cookies or generating JSON Web Tokens (JWTs) on demand. These non-standard practices can introduce unanticipated vulnerabilities, as they may lack the security considerations outlined in the official specifications, potentially leading to security breaches.</li> <li>Use of Credential-Based Authentication over Credential-less Methods: Cloud providers offer credential-less authentication mechanisms, such as intra-cloud access using instance profiles or OIDC federation. Relying on static, credential-based authentication (like long-lived API keys or passwords) is discouraged because these credentials can be exposed in breaches, code repositories, or logs. Credential-less methods provide temporary, scoped credentials that reduce the risk of credential leakage and misuse.</li> <li>App Passwords Bypassing MFA: Platforms like Microsoft and Google provide app-specific passwords to support older applications that do not support modern authentication protocols. These passwords bypass MFA, meaning that even if a user has MFA enabled, the app password can be used to access the account without additional verification. Attackers who obtain an app password can exploit this to gain unauthorized access, effectively nullifying the security benefits of MFA and converting the user account into an insecure service account.</li> <li>Legacy Authentication Protocols Using Username and Password: Some applications continue to use outdated or proprietary authentication flows that rely on direct transmission of usernames and passwords, mimicking OAuth-like behavior without adhering to its security standards. These methods lack the protections offered by official OAuth flows, making them susceptible to credential interception, replay attacks, and man-in-the-middle exploits.</li> </ul>"},{"location":"4-insecure-authentication/#how-to-prevent","title":"How to Prevent","text":"<ul> <li>Adopt Modern Authentication Standards: Use OAuth 2.1 and OIDC for secure authentication and avoid deprecated flows like Implicit Flow or Authorization Code Flow without PKCE.</li> <li>Leverage Credential-less Methods: Replace static credentials with temporary, scoped tokens through instance profiles or OIDC federation.</li> <li>Standardize OAuth Implementations: Avoid custom practices that deviate from OAuth standards to minimize security gaps.</li> <li>Conduct Regular Security Audits: Periodically review authentication methods to identify and eliminate deprecated or insecure configurations.</li> </ul>"},{"location":"4-insecure-authentication/#references","title":"References","text":"<ul> <li>Salesforce: Disabling Insecure Authorization Flows</li> <li>OAuth 2.0 Security Best Current Practice - Implicit Grant</li> <li>Salesforce: Username-Password OAuth Flow</li> <li>Auth0: Implicit Flow with Form Post</li> <li>Microsoft Support: Using App Passwords with Apps that Don't Support Two-Step Verification</li> <li>Google Account Help: Sign in Using App Passwords</li> </ul>"},{"location":"4-insecure-authentication/#data-points","title":"Data Points","text":"<ul> <li>CSA NHI Report - 22% answers put deprecated access methods as one of the top 3 most concerning NHI threats. (8/10)</li> <li>Recent Breach - MSFT SAS Token Breach</li> <li>Recent Breach - Uber Breach</li> <li>Recent Breach - CircleCI Breach</li> <li>Recent Breach - Cloudflare Breach</li> <li>Recent Breach - Snowflake Breach</li> <li>Recent Breach - .env file Breach</li> </ul>"},{"location":"5-overprivileged-nhi/","title":"NHI5:2024 Overprivileged NHI","text":"Threat agents/Attack vectors Security Weakness Impacts Exploitability - Hard Prevalence - Widespread : Detectability - Hard Technical - Severe : Business - Specific Successfully exploiting an overprivileged NHI requires the threat agent to first gain access to the environment. Therefore, Overprivileged NHI is dependent on a separate initial access vector. NHIs are very commonly over-privileged because right-sizing privileges for NHIs is a very difficult and time-consuming task. Detecting Overprivileged NHI is difficult given the challenges in understanding which of the NHI's privileges are actually being used by the underlying application. Overprivileged NHI impact is high due to the high amount of privileges associated. These tend to be admin accounts with widespread impact."},{"location":"5-overprivileged-nhi/#description","title":"Description","text":"<p>Non-human identities (NHIs)\u2014such as service accounts, API tokens, and workload identities\u2014are designed for programmatic access to cloud resources and services. They enable applications, services, and automated processes to function securely without human intervention. However, during application development and maintenance, developers or administrators may inadvertently assign NHIs excessive privileges beyond their functional requirements, unnecessarily expanding the potential blast radius in case of a compromise. When an over-privileged NHI is compromised\u2014whether through vulnerabilities in the application, malware, or other security breaches\u2014attackers can exploit the excessive permissions to:</p> <ul> <li>Access Sensitive Data: Unauthorized access to confidential files, databases, or user information.</li> <li>Escalate Privileges: Gain higher levels of access within the system, potentially reaching administrative or root levels.</li> <li>Move Laterally Within the Network: Access other systems or services within the organization's network that the NHI can reach.</li> <li>Install Malicious Software: Deploy malware, ransomware, or other malicious tools to further compromise the system.</li> <li>Entire cloud account takeover: Leak of identities related to cloud root account or administrator, could leak to full control and to account takeover.</li> </ul>"},{"location":"5-overprivileged-nhi/#example-attack-scenarios","title":"Example Attack Scenarios","text":"<ul> <li>Overprivileged Web Server User: A web server runs under a local user account on a Linux machine that also has access to other applications, system files, or sensitive data directories. If the web server has a vulnerability that allows remote code execution, an attacker could exploit this to gain control over the web server process. With the excessive permissions of the user account, the attacker could access or modify other applications, steal sensitive data, or make unauthorized system changes.</li> <li>Overprivileged VM: A Jenkins EC2 instance is mistakenly assigned the AWS AdministratorAccess managed policy, even though it only requires permissions for EKS and ECS. Exploiting a vulnerability on the instance, an attacker gains initial access, leverages the excessive privileges to navigate the cloud environment, and exfiltrates sensitive data from S3 buckets.</li> <li>Overprivileged OAuth Application: A developer installs the OAuth application that they are developing on a production Azure account and provides it with the AppRoleAssignment.ReadWriteAll privilege despite the App only requiring read access to a specific directory in Azure Blob Storage. This significantly increases the impact of the damage that a malicious entity can inflict if it gets a hold of that application.</li> <li>Database Service Account with Excessive Permissions: A managed database service operates with a service account that has administrative privileges on the account. If an attacker manages to get access to the database, they could use the service account's high-level permissions to access and perform actions on the entire cloud account.</li> <li>Unrestricted Application User with Broad Network Access: A database application operates with a service account that has administrative privileges on the server. If an attacker exploits a vulnerability in the database software, they could use the service account's high-level permissions to execute arbitrary commands, install malware, or create new user accounts, leading to full system compromise.</li> </ul>"},{"location":"5-overprivileged-nhi/#how-to-prevent","title":"How To Prevent","text":"<ul> <li>Enforce the principle of least privilege: Assign each identity only the permissions essential for its specific tasks, avoiding any form of administrative privileges unless absolutely necessary.</li> <li>Regularly audit and review permissions: Continuously assess the permissions granted to identities to ensure they are strictly necessary. Audit privileged identities to detect and address potential misuse or overprovisioning.</li> <li>Establish preventive guardrails: Implement deny policies at the organizational level to prohibit excessively permissive configurations and enforce strict access controls.</li> <li>Leverage Just-in-Time (JIT) access: Utilize tools that enable temporary, on-demand elevation of privileges, allowing for high-level access only when required and within a defined time frame.</li> </ul>"},{"location":"5-overprivileged-nhi/#references","title":"References","text":"<ul> <li>.env File Breach (August 2024) - link1, link2</li> <li>Microsoft Midnight Blizzard breach (January 2024) - link1, link2</li> <li>Microsoft SAS Token Breach (September 2023) - link</li> <li>CircleCI Breach (January 2023) - link</li> <li>Uber Breach (September 2022) - link</li> <li>Verkada Breach (March 2021) - link</li> </ul>"},{"location":"5-overprivileged-nhi/#data-points","title":"Data points","text":"<ul> <li>Datadog State of the Cloud 2024</li> <li>17.6% have excessive data access, such as listing and accessing data from all S3 buckets in the account</li> <li>10% of clusters have a dangerous node role that has full administrator access, allows for privilege escalation, has overly permissive data access (e.g., all S3 buckets), or allows for lateral movement across all workloads in the account</li> <li>Over one in three Google Cloud VMs (33%) have sensitive permissions to a project</li> <li>CSA NHI Report </li> <li>33% answers put over-privileged accounts as one of the top 3 most concerning NHI threats (3/10)</li> <li>37% of times over-privileged identities were the cause for NHI-related security incidents (2/10)</li> <li>22% of organizations need managing permissions as the most important capability of an NHI tool (5/16)</li> <li>26% of organizations believe that over 50% of their service accounts are over-privileged</li> <li>Orca Security State of the Cloud Security report 2022</li> <li>44% of environments have at least one privileged identity access management (IAM) role.</li> <li>23% have at least one EC2 Instance with Administrator IAM role.</li> </ul>"},{"location":"6-insecure-cloud-deployment-configurations/","title":"NHI6:2025 Insecure Cloud Deployment Configurations","text":"<p>TBA</p>"},{"location":"7-long-lived-secrets/","title":"NHI7:2025 Long-Lived Secrets","text":"<p>TBA</p>"},{"location":"8-environment-isolation/","title":"NHI8:2025 Environment Isolation","text":"<p>TBA</p>"},{"location":"9-nhi-reuse/","title":"NHI9:2025 NHI Reuse","text":"<p>TBA</p>"},{"location":"acknowledgments/","title":"Acknowledgments","text":"<p>TBA</p>"},{"location":"introduction/","title":"Introduction","text":""},{"location":"introduction/#what-are-non-human-identities-nhis","title":"What Are Non-Human Identities (NHIs)?","text":"<p>Non-human identities (NHIs) are used to provide authorization to software entities such as applications, APIs, bots, and automated systems to access secured resources. Unlike human identities, NHIs are not controlled or directly owned by a human. Their identity object and authentication often work differently to human, and common human user security measures do not apply to them.</p> <p>Examples of NHIs include:</p> <ul> <li>API keys used by microservices to access database applications.</li> <li>Service accounts in backend systems connecting multiple subsystems.</li> <li>Roles assocaited with automated services to access cloud resources.</li> <li>Tokens used by bots to access protected application resources.</li> </ul> <p>As modern software becomes increasingly automated and interconnected, NHIs have become essential to application development.</p>"},{"location":"introduction/#the-importance-of-securing-nhis","title":"The Importance of Securing NHIs","text":"<p>Mismanagement of NHIs introduces significant security risks. Key issues include:</p> <ul> <li>Excessive Permissions: NHIs are commonly granted very broad access to resources which leads to a widespread damage if compromised.</li> <li>Credential Mismanagement: NHI credentials can easily be wrongly managed: leaving hardcoded keys in code, poor or no rotation policies, and usage of deprecated authentication method make NHI vulnerable to compromise. </li> <li>Lack of Monitoring: NHIs are notoriously under-monitored, allowing malicious activity to go unnoticed.</li> </ul> <p>The key issues above make it so a compromised NHIs can lead to unauthorized access, data breaches, or attacks on infrastructure. With NHIs playing critical roles in development pipelines, cloud environments, and SaaS ecosystems, securing them is essential.</p>"},{"location":"introduction/#examples-of-risks-and-breaches","title":"Examples of Risks and Breaches","text":"<p>In recent worlds, with the increase of prevalence in using NHIs, real-world incidents involving a compromised NHI have grown exponentially. Some of the highest profile incidents are presented below and demonstrate the risks of insecure NHIs:</p> <ul> <li>Microsoft's Midnight Blizzard Breach (January 2024): A nation-state actor, Midnight Blizzard, initiated an attack against Microsoft's tenant. After gaining access to a non-production Microsoft 365 test tenant, they exploited a legacy OAuth application \u2014 an unmanaged non-human identity \u2014 with full privileges to access Microsoft's production environment. This led to unauthorized access to corporate email accounts, resulting in the exfiltration of sensitive communications and documents. </li> <li>Okta's Support System Breach (November 2023): Okta has experienced a security breach involving a compromised service account. An employee had saved the credentials for this service account to their personal Google account after signing in on an Okta-managed device. The compromise of the employee's personal Google account allowed attackers to obtain these credentials, granting unauthorized access to Okta's customer support system. The attackers accessed files related to 134 customers, including HTTP Archive (HAR) files containing sensitive data like session tokens.</li> <li>Internet Archive's Zendesk Support Platform Breach (October 2024): Attackers exploited unrotated access tokens tied to the Internet Archive's Zendesk support platform, leading to unauthorized access and potential data exposure.  This incident highlights the importance of regularly rotating and securing non-human identity credentials to prevent unauthorized access. </li> </ul>"},{"location":"introduction/#about-the-owasp-nhi-top-10-project","title":"About the OWASP NHI Top 10 Project","text":"<p>The OWASP Non-Human Identity (NHI) Top 10 identifies and ranks the most critical risks associated with NHIs, providing a practical guide for developers and organizations. </p>"},{"location":"introduction/#why-this-project-matters","title":"Why This Project Matters","text":"<p>As NHIs become more prevalent, securing them has become as important as protecting human users. This project aims to:</p> <ul> <li>Raise awareness of NHI-related security challenges.</li> <li>Offer actionable insights for securing NHIs from their most dangerous risks.</li> <li>Help developers and organizations prioritize risks and implement best practices.</li> </ul>"},{"location":"introduction/#how-we-built-the-list","title":"How We Built the List","text":"<p>We identified key risks through real-world incidents, surveys, CVE databases, and industry input. Using the collected data and based on the OWASP Risk Rating Methodology, we ranked the top 10 risks to provide a clear prioritized list.</p>"},{"location":"introduction/#what-developers-should-do","title":"What Developers Should Do","text":"<p>Developers can use this project to:</p> <ol> <li>Understand the risks associated with NHIs in their applications.</li> <li>Apply the recommended practices to secure NHIs and mitigate threats.</li> <li>Monitor and improve their NHI security continuously.</li> </ol>"},{"location":"methodology-and-data/","title":"Methodology and Data","text":"<p>TBD</p>"},{"location":"ranking-criteria/","title":"Ranking Criteria","text":"<p>TBD</p>"},{"location":"release-notes/","title":"Release Notes","text":"<p>TBD</p>"},{"location":"table-of-contents/","title":"Table of Contents","text":"<ul> <li>Table of Contents</li> <li>Introduction</li> <li>Ranking Criteria</li> <li>Methodology and Data</li> <li>OWASP Non-Human Identities Top 10 - 2025</li> <li>NHI1:2025 Improper Offboarding</li> <li>NHI2:2025 Secret Leakage</li> <li>NHI3:2025 Vulnerable Third-Party NHI</li> <li>NHI4:2025 Insecure Authentication</li> <li>NHI5:2025 Overprivileged NHI</li> <li>NHI6:2025 Insecure Cloud Deployment Configurations</li> <li>NHI7:2025 Long-Lived Secrets</li> <li>NHI8:2025 Environment Isolation</li> <li>NHI9:2025 NHI Reuse</li> <li>NHI10:2025 Human Use of NHI</li> <li>Acknowledgments</li> </ul>"},{"location":"top-10-2025/","title":"OWASP Non-Human Identities Top 10 - 2025","text":"<p>TBD</p>"}]}