{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the OWASP Non-Human Identity (NHI) Top 10 - 2025!</p> <p>This project outlines the top 10 risks associated with non-human identities (NHIs) for application developers. With NHIs becoming vital in development pipelines, understanding these risks is critical.</p> <p>The list was compiled by identifying key risks organizations face with NHIs and ranking them using the OWASP Risk Rating Methodology. Data sources included real-world breaches, surveys, CVE databases, and more. For details on our process, see Ranking Criteria and Methodology and Data.</p> <p>Start with the project's Introduction, and explore the OWASP Non-Human Identity Top 10 - 2025 for an overview of the risks.</p> <p>Contributions are welcome! See our Contributing Guidelines to get involved and help improve the project.</p>"},{"location":"1-improper-offboarding/","title":"NHI1:2025 Improper Offboarding","text":"Threat Agents &amp; Attack Vectors Security Weakness Impact Exploitability: Easy Prevalence: WidespreadDetectability: Hard Technical Impact: Severe Exploiting an improperly offboarded NHI greatly depends on context. Considering the case of an inside threat, it\u2019s quite simple to identify what necessary credentials are needed to exploit the improperly offboarded identity. The current capabilities of offboarding NHIs, such as service accounts, are lackluster, and organizations rarely use existing possibilities. Thus, many NHIs are not properly offboarded after they are no longer needed or once the original owner has left.Security teams are lacking tools to detect old NHIs that were not properly offboarded. Existing techniques of detecting such NHIs rely on incomplete information that takes a long time to compile. Due to the deep insight a potential inside threat has of the organization, exploiting improperly offboarded NHIs could lead to compromise of critical systems, exfiltration of sensitive data and usage of advanced persistence methods."},{"location":"1-improper-offboarding/#description","title":"Description","text":"<p>Improper offboarding refers to the inadequate deactivation or removal of non-human identities (NHIs) such as service accounts and access keys when they are no longer needed. This situation often arises when applications are deprecated, services are taken offline, or when the original owners or administrators of these NHIs leave the organization. Failure to properly offboard NHIs poses significant security risks. Unmonitored and deprecated services may remain vulnerable, and their associated NHIs can be exploited by attackers to gain unauthorized access to sensitive systems and data. Additionally, orphaned NHIs may retain elevated permissions, amplifying the potential damage from any security breach.</p>"},{"location":"1-improper-offboarding/#example-attack-scenarios","title":"Example Attack Scenarios","text":"<ul> <li>Orphaned Kubernetes Service Accounts: A Kubernetes cluster belonging to a decommissioned service retains active service accounts. If an attacker gains access to this unmonitored cluster, they could exploit these service accounts to interact with other resources within the organization's infrastructure, potentially leading to data exfiltration or further compromise.</li> <li>Ex-Employee Exploiting Unrevoked Credentials: An employee who managed automated services leaves the organization, but the NHIs associated with those services are not disabled or transferred. The ex-employee could misuse still-valid credentials to access the organization's systems remotely, leading to unauthorized data access, service disruptions, or even sabotage.</li> <li>Leftover Apps Used for Privilege Escalation &amp; Lateral Movement: An application created in a test environment, designated to test a workload, is later connected to a sensitive production environment to complete the testing suite, and is not decommissioned once the workload is transferred to run in a production server. Then, an attack reaching the less secure test environment can use this application to move laterally within the organization.</li> </ul>"},{"location":"1-improper-offboarding/#how-to-prevent","title":"How to Prevent","text":"<ul> <li>Implement an offboarding process that reviews all NHIs associated with the departing employee. For each NHI, determine if it is still required. If not, decommission it; otherwise, transfer ownership to another employee and rotate any credentials the departing employee may have had access to during its creation.</li> <li>Automate offboarding steps wherever possible by integrating HR systems with identity and access management (IAM) tools.</li> <li>Regularly audit active NHIs to identify ongoing human usage and block potential misuse.</li> </ul>"},{"location":"1-improper-offboarding/#references","title":"References","text":"<ul> <li>Cloud Security Alliance: Decommissioning Orphaned and Stale Non-Human Identities</li> <li>Ex-Employee Accessed Former Company's System and Deleted Resources</li> <li>Microsoft Breach by Midnight Blizzard Threat Actor</li> </ul>"},{"location":"1-improper-offboarding/#data-points","title":"Data Points","text":"<ul> <li>CSA NHI Report - 31% answers put insufficient NHI offboarding as one of the top 3 most concerning NHI threats. (5/10)</li> <li>CSA NHI Report - 32% of times orphaned identities were the cause for NHI-related security incidents. (4/10)</li> <li>CSA NHI Report - 15% of organizations need automated provisioning and de-provisioning as the most important capability of an NHI tool. (9/16)</li> <li>CSA NHI Report - 51% of organizations have no formal process to offboard or revoke long lived API keys.</li> <li>Recent Breach - Microsoft Breach</li> </ul>"},{"location":"10-human-use-of-nhi/","title":"NHI10:2025 Human Use of NHI","text":"Threat Agents &amp; Attack Vectors Security Weakness Impact Exploitability: Hard Prevalence: CommonDetectability: Hard Technical Impact: LowBusiness: Specific Successfully exploiting Human use of NHI requires the threat agent first to gain access to the environment. Therefore, Human use of NHI attacks depends on a separate initial access vector. Developers often impersonate service accounts to debug issues.Most NHI providers do not provide tooling to differentiate between workloads assuming the NHI and humans assuming the NHI. Human use of NHI impact depends on the privilege of the associated NHI.If least-privilege is adopted, this impact is Low."},{"location":"10-human-use-of-nhi/#description","title":"Description","text":"<p>Non-human identities (NHIs)\u2014such as service accounts, API tokens, and workload identities\u2014are designed for programmatic access to cloud resources and services. They enable applications, services, and automated processes to function securely without human intervention. However, during application development and maintenance, developers or administrators may misuse these NHIs for manual tasks that should be performed using individual human identities with appropriate privileges. This practice introduces significant security risks:  - Elevated privileges beyond necessity  - Lack of detailed auditing and accountability  - Indistinguishable activity between humans and automation  - Obfuscation by attackers</p>"},{"location":"10-human-use-of-nhi/#example-scenarios","title":"Example Scenarios","text":"<ul> <li>Administrators Using Service Account Credentials:  An IT administrator uses a service account's credentials to log into cloud management consoles for convenience. This service account has extensive permissions intended for automated deployment tasks. The administrator now has access beyond their role's requirements, and any actions they perform are logged under the service account, obscuring accountability.</li> <li>Developers Executing Commands with NHIs: A developer manually runs scripts or commands using an NHI that has permissions to production environments. If the developer makes an error or performs unauthorized changes, it becomes difficult to trace the activity back to them, as logs attribute the actions to the NHI.</li> <li>Shared API Tokens Among Team Members: A team shares an API token associated with a service account to access certain resources quickly. This token has broad access rights. If any team member's environment is compromised, the attacker can use the shared token to access sensitive systems, and it would be challenging to identify the source of the breach.</li> <li>Bypassing Security Controls: An employee uses an NHI to access resources that are restricted under their user account due to policies like MFA requirements or IP address restrictions. This undermines the organization's security posture and can lead to unauthorized data access.</li> <li>Attackers Leveraging NHIs for Persistence: After compromising an environment, an attacker obtains NHI credentials and uses them to maintain access. Since NHIs are not subject to regular password changes or MFA, the attacker can persist in the environment undetected for extended periods.</li> </ul>"},{"location":"10-human-use-of-nhi/#how-to-prevent","title":"How to Prevent","text":"<ul> <li>Use dedicated identities: Use dedicated human identities with appropriate roles and permissions for debugging or maintenance tasks.</li> <li>Audit and Monitor NHI Activity: Use tools or platforms that support auditing and tracking of NHI usage, making human use detectable and accountable.</li> <li>Use Context-Aware Access Controls: Use conditional access policies that detect and block human access to NHIs based on suspicious patterns.</li> <li>Educate Developers and Administrators: Provide training on the risks of using NHIs manually and provide alternative access methods to ensure secure access practices.</li> </ul>"},{"location":"10-human-use-of-nhi/#references","title":"References","text":"<ul> <li>Microsoft Azure: Best Practices for Securing Service Accounts</li> <li>AWS Security Blog: Best Practices for Managing AWS Access Keys</li> <li>Google Cloud: Best practices for managing service account keys</li> </ul>"},{"location":"10-human-use-of-nhi/#data-points","title":"Data Points","text":"<ul> <li>Anetac Report: 75 Percent of Organizations Misuse Service Accounts, Leading to Critical Security Risks</li> <li>CSA NHI Report - 32% of organizations put service accounts as most challenging to manage. (1/16)</li> <li>CSA NHI Report - 26% of organizations believe that over 50% of their service accounts are over-privileged</li> </ul>"},{"location":"2-secret-leakage/","title":"NHI2:2025 Secret Leakage","text":"Threat agents/Attack vectors Security Weakness Impacts Exploitability - Easy Prevalence - Common : Detectability - Hard Technical - Severe : Business - Specific Successfully exploiting a Leaked Secret is extremely easy given the fact that the secret enables the attacker to authenticate as the legitimate application. Secrets are a common authentication method for machine-to-machine communication including API Keys, Access Keys, DB credentials. Throughout the development lifecycle, secrets are used to build new features and test machine-to-machine integrations and therefore tend to proliferate in the organization to many different data stores.Detecting Leaked Secrets is difficult given the sheer variety of data stores in which they may appear. For example, Secrets can leak to developer endpoints, application logs, configuration files, SaaS providers, Cloud platforms and more. Secrets tend to hold credentials for high-impact NHI (such as API Keys and Database connection strings), therefore impact on breach is Severe."},{"location":"2-secret-leakage/#description","title":"Description","text":"<p>Secret Leakage refers to the leakage of sensitive NHIs such as API keys, tokens, encryption keys, and certificates to unsanctioned data stores throughout the software development lifecycle. Developers frequently use these secrets to enable applications to authenticate and interact with various services and resources within an organization. However, when secrets are leaked \u2014for instance, hard-coded into source code, stored in plain text configuration files, or sent over public chat applications \u2014they become susceptible to exposure. Exposed secrets can lead to significant security risks. If a secret is leaked, whether through code repositories, logs, or malware on a developer's machine, threat actors can exploit it to gain unauthorized access to systems, steal data, or escalate privileges within the network. This can result in data breaches, service disruptions, and a loss of trust from customers and stakeholders.</p>"},{"location":"2-secret-leakage/#example-attack-scenarios","title":"Example Attack Scenarios","text":"<ul> <li>Azure SAS Token Leakage: An Azure SAS Token is committed to a public Github repository. Attackers use that SAS Token to authenticate to the associated Azure subscription and leak internal Microsoft Teams messages.</li> <li>Delinea Admin API Key: A Delinea Admin API Key is stored in a script in an employee-public file share. An attacker with limited privileges in the corporate network identifies the API Key, reads an admin credential from the PAM and escalates their privilege in the corporate network.</li> </ul>"},{"location":"2-secret-leakage/#how-to-prevent","title":"How To Prevent","text":"<ul> <li>Use Ephemeral Credentials Where Possible</li> <li>Replace static secrets with short-lived, ephemeral credentials that are generated on-demand (e.g., AWS STS, Azure Managed Identities, or OAuth tokens).</li> <li> <p>Ephemeral credentials reduce the risk of long-term exposure.</p> </li> <li> <p>Use Secret Management Tools</p> </li> <li>Store secrets securely using dedicated secret management tools such as AWS Secrets Manager, Azure Key Vault, or HashiCorp Vault.</li> <li> <p>Ensure secrets are not hardcoded in source code, configuration files, or scripts.</p> </li> <li> <p>Automate Secret Detection</p> </li> <li> <p>Integrate secret scanning tools (e.g., GitHub Secret Scanning, TruffleHog, Gitleaks) into CI/CD pipelines to detect and prevent secrets from being committed to repositories.</p> </li> <li> <p>Restrict Secret Scope and Permissions</p> </li> <li>Follow the principle of least privilege by restricting access to secrets to only the applications and services that require them.</li> <li> <p>Use role-based access control (RBAC) to enforce fine-grained permissions.</p> </li> <li> <p>Rotate Secrets Regularly</p> </li> <li>Automate the process of secret rotation to reduce the impact of exposed credentials.</li> <li>Use tools that support secret versioning and automated updates in dependent services.</li> </ul>"},{"location":"2-secret-leakage/#references","title":"References","text":"<ul> <li>38TB of data accidentally exposed by Microsoft AI researchers - link</li> <li>What Caused the Uber Data Breach? - link</li> <li>Microsoft Azure Key Vault: Secrets Management Best Practices - link</li> <li>HashiCorp Vault: What is Vault? - link</li> <li>GitHub: Best Practices for Securing Your Code -link</li> <li>AWS Secrets Manager - link</li> </ul>"},{"location":"2-secret-leakage/#data-points","title":"Data points","text":"<ul> <li>CSA NHI Report</li> <li>31% of times poor secrets management was the cause for NHI-related security incidents. (6/10)</li> <li>21% of organizations put service accounts as most challenging to manage. (6/16)</li> <li>26% of organizations need management of secrets lifecycle as the most important capability of an NHI tool. (1/16)</li> <li>37% of organizations report secrets are stored in environment variables or hard-coded into application code.</li> <li>Verizon DBIR</li> <li>21% of breaches initial action was use of stolen creds (1/10)</li> <li>Recent Breaches</li> <li>MSFT SAS Token Breach - link</li> <li>Uber Breach - link</li> <li>Internet Archive breach - link</li> </ul>"},{"location":"3-vulnerable-third-party-nhi/","title":"NHI3:2025 Vulnerable Third-Party NHI","text":"Threat agents/Attack vectors Security Weakness Impacts Exploitability - Average Prevalence - Common : Detectability - Hard Technical - Severe : Business - Specific Finding a vulnerable 3rd-party application is not trivial and requires some work to achieve. However, once breached, access to the 3rd-party customers/users/clients is simple. 3rd-party applications are commonly used by developers, such as VSCode extensions and business applications. In many cases, the owners of said extensions are small community or individual developers not following best practices and thus open to vulnerabilities. The 3rd-party implementation is usually hidden from the organization. Furthermore, breaches are uncommonly publicly known, and if so, details are incomplete, making them difficult to monitor. Detecting a breached 3rd-party without advanced notice is near impossible. Third-party applications are usually given wide access to sensitive material, such as source code, secrets, files, etc. Compromising a developer\u2019s ecosystem can lead to a supply chain attack, the theft of personal data, and the effect on critical systems."},{"location":"3-vulnerable-third-party-nhi/#description","title":"Description","text":"<p>Third-party non-human identities (NHIs) are extensively integrated into the development workflow, both through the use of integrated development environments (IDEs) and their extensions and also through the use of 3rd party SaaS. Visual Studio Code (VSCode), for example, has a vast marketplace of extensions that enhance functionality. These extensions often require significant access to the developer's machine, including the ability to read code, access environment variables, and interact with other system resources. To perform their functions, 3rd parties may need to integrate with external services such as version control systems, databases, virtual machines, and cloud environments. This integration necessitates providing the 3rd parties with sensitive NHIs like access tokens, API keys, or SSH keys. If a third-party extension is compromised\u2014whether through a security vulnerability or a malicious update\u2014it can be exploited to steal these credentials or misuse the granted permissions. Moreover, 3rd parties can be exposed to hard-coded credentials within the codebase or environment variables that contain sensitive information. If a 3rd party has access to these elements, and it becomes malicious or is already malicious, it can exfiltrate this information. Therefore, relying on third-party NHIs without proper vetting and security measures introduces significant risks to the organization.</p>"},{"location":"3-vulnerable-third-party-nhi/#example-attack-scenarios","title":"Example Attack Scenarios","text":"<ul> <li>IDE Integration with Code Repositories Developers often configure their IDEs to interact directly with code repositories like GitHub or GitLab. This setup requires supplying the IDE or its extensions with personal access tokens (PATs) or SSH keys to enable features like code syncing, pushing commits, and managing pull requests. If an extension is compromised, these credentials can be exposed, allowing unauthorized access to the developer's repositories and potentially sensitive organizational code.</li> <li>Extensions Accessing Cloud Resources Extensions that facilitate deployment and testing on virtual machines or cloud services require access to cloud environments. Developers provide these extensions with NHIs such as API keys or access tokens to interact with services like AWS, Azure, or Google Cloud Platform. A malicious extension could use these credentials to access, modify, or delete cloud resources, leading to data breaches or service disruptions.</li> <li>3rd Party Service Provider Developers integrate a 3rd party service provider such as Sisense to create a BI application. The developers create a privileged NHI such as database credentials and send them to the provider as part of the integration process. If the provider is breached, the attacker can leverage the NHI to gain access to the developer\u2019s environment.</li> </ul>"},{"location":"3-vulnerable-third-party-nhi/#how-to-prevent","title":"How To Prevent","text":"<ul> <li>Vet and Limit Third-Party Integrations </li> <li>Perform security reviews before integrating third-party tools or services, ensuring vendors follow security best practices.  </li> <li> <p>Grant only the minimum permissions required (principle of least privilege) and regularly audit or revoke unused access.</p> </li> <li> <p>Monitor and Detect Third-Party Behavior </p> </li> <li>Continuously monitor third-party activity using logs, API call tracking, and behavior analytics to detect anomalies.  </li> <li> <p>Implement security scanning tools to identify vulnerabilities or malicious behavior in third-party software.</p> </li> <li> <p>Use Ephemeral and Rotating Credentials </p> </li> <li>Replace long-term secrets with short-lived, ephemeral credentials (e.g., AWS STS, Azure Managed Identities).  </li> <li>Automate credential rotation to limit the impact of compromised third-party integrations.</li> </ul>"},{"location":"3-vulnerable-third-party-nhi/#references","title":"References","text":"<ul> <li>JetBrains Security Issue Affecting GitHub Plugin</li> <li>Malicious VSCode Extensions Stealing Data</li> <li>Deep Dive into VSCode Extension Vulnerabilities</li> <li>Making sense out of the Sisense hack</li> </ul>"},{"location":"3-vulnerable-third-party-nhi/#data-points","title":"Data points","text":"<ul> <li>Datadog State of the Cloud 2024</li> <li>10% third party integration to AWS are overprivileged.</li> <li>2% third party integration to AWS are vulnerable to confused deputy vulnerability.</li> <li>Initial access to 365 is made through malicious 3d-party OAuth apps.</li> <li>CSA NHI Report</li> <li>38% answers put supply chain attacks as one of the top 3 most concerning NHI threats. (2/10)</li> <li>16% answers put malicious suppliers as one of the top 3 most concerning NHI threats. (9/10)</li> <li>29% of times compromised external integrations were the cause for NHI-related security incidents. (7/10)</li> <li>21% of organizations put managing requests for third-party tools and services as most challenging to manage. (10/16)</li> <li>26% of organizations need visibility into third-party vendors as the most important capability of an NHI tool. (1/16)</li> <li>38% of organizations reported limited to no visibility into third-party vendors.</li> <li>Recent Breaches</li> <li>Sisense Breach - link</li> </ul>"},{"location":"4-insecure-authentication/","title":"NHI4:2025 Insecure Authentication","text":"Threat Agents &amp; Attack Vectors Security Weakness Impact Exploitability: Easy Prevalence: WidespreadDetectability: Easy Technical Impact: ModerateBusiness: Specific Once an attacker detects an NHI using insecure authentication, they can utilize known techniques and tools to abuse and compromise the NHI. Legacy applications are present in almost every authorization and usually use the legacy/insecure authentication methods like the implicit OAuth flow, or a service account without MFA.Depending on the type of insecure authentication, detectability can vary between available simple discovery capabilities, to specific insecure authentication offenders that are difficult to identify. Insecure protocols are commonly used to facilitate sensitive processes that are given high access. Successful exploitation of an NHI using insecure authentication can lead to account takeover or privilege escalation."},{"location":"4-insecure-authentication/#description","title":"Description","text":"<p>Developers frequently integrate internal and external (third-party) services into their SaaS applications and cloud environments to enhance their experience or facilitate operation. These services require access to resources within these systems, necessitating authentication credentials. Multiple authentication methods are available across various platforms, and developers must judiciously select the most secure and appropriate option for their specific use case. However, some authentication methods are deprecated, vulnerable to known attacks, or considered weak due to outdated security practices. Utilizing insecure or obsolete authentication mechanisms can expose organizations to significant risks, including unauthorized access, data breaches, and compliance violations. It is imperative for developers and organizations to evaluate all available authentication options, adhere to industry best practices, and choose methods that provide robust security features and adherence to standardized protocols like OAuth 2.1 and OpenID Connect (OIDC).</p>"},{"location":"4-insecure-authentication/#example-attack-scenarios","title":"Example Attack Scenarios","text":"<ul> <li>Deprecated OAuth Flows: Certain flows from earlier OAuth versions (OAuth 1.0 and OAuth 2.0) have been deprecated due to security vulnerabilities. For example:<ul> <li>Implicit Flow: Commonly used for single-page applications, it is now discouraged because it exposes access tokens in the URL, making them susceptible to interception and replay attacks.</li> <li>Authorization Code Flow without PKCE: Vulnerable to interception and Cross-Site Request Forgery (CSRF) attacks. Modern implementations should use the Proof Key for Code Exchange (PKCE) extension to enhance security.</li> </ul> </li> <li>Non-Standard OAuth Implementations: Some platforms deviate from official OAuth standards by implementing custom behaviors, such as converting access tokens into cookies or generating JSON Web Tokens (JWTs) on demand. These non-standard practices can introduce unanticipated vulnerabilities, as they may lack the security considerations outlined in the official specifications, potentially leading to security breaches.</li> <li>Use of Credential-Based Authentication over Credential-less Methods: Cloud providers offer credential-less authentication mechanisms, such as intra-cloud access using instance profiles or OIDC federation. Relying on static, credential-based authentication (like long-lived API keys or passwords) is discouraged because these credentials can be exposed in breaches, code repositories, or logs. Credential-less methods provide temporary, scoped credentials that reduce the risk of credential leakage and misuse.</li> <li>App Passwords Bypassing MFA: Platforms like Microsoft and Google provide app-specific passwords to support older applications that do not support modern authentication protocols. These passwords bypass MFA, meaning that even if a user has MFA enabled, the app password can be used to access the account without additional verification. Attackers who obtain an app password can exploit this to gain unauthorized access, effectively nullifying the security benefits of MFA and converting the user account into an insecure service account.</li> <li>Legacy Authentication Protocols Using Username and Password: Some applications continue to use outdated or proprietary authentication flows that rely on direct transmission of usernames and passwords, mimicking OAuth-like behavior without adhering to its security standards. These methods lack the protections offered by official OAuth flows, making them susceptible to credential interception, replay attacks, and man-in-the-middle exploits.</li> </ul>"},{"location":"4-insecure-authentication/#how-to-prevent","title":"How to Prevent","text":"<ul> <li>Adopt Modern Authentication Standards: Use OAuth 2.1 and OIDC for secure authentication and avoid deprecated flows like Implicit Flow or Authorization Code Flow without PKCE.</li> <li>Leverage Credential-less Methods: Replace static credentials with temporary, scoped tokens through instance profiles or OIDC federation.</li> <li>Standardize OAuth Implementations: Avoid custom practices that deviate from OAuth standards to minimize security gaps.</li> <li>Conduct Regular Security Audits: Periodically review authentication methods to identify and eliminate deprecated or insecure configurations.</li> </ul>"},{"location":"4-insecure-authentication/#references","title":"References","text":"<ul> <li>Salesforce: Disabling Insecure Authorization Flows</li> <li>OAuth 2.0 Security Best Current Practice - Implicit Grant</li> <li>Salesforce: Username-Password OAuth Flow</li> <li>Auth0: Implicit Flow with Form Post</li> <li>Microsoft Support: Using App Passwords with Apps that Don't Support Two-Step Verification</li> <li>Google Account Help: Sign in Using App Passwords</li> </ul>"},{"location":"4-insecure-authentication/#data-points","title":"Data Points","text":"<ul> <li>CSA NHI Report - 22% answers put deprecated access methods as one of the top 3 most concerning NHI threats. (8/10)</li> <li>Recent Breach - MSFT SAS Token Breach</li> <li>Recent Breach - Uber Breach</li> <li>Recent Breach - CircleCI Breach</li> <li>Recent Breach - Cloudflare Breach</li> <li>Recent Breach - Snowflake Breach</li> <li>Recent Breach - .env file Breach</li> </ul>"},{"location":"5-overprivileged-nhi/","title":"NHI5:2024 Overprivileged NHI","text":"Threat agents/Attack vectors Security Weakness Impacts Exploitability - Hard Prevalence - Widespread : Detectability - Hard Technical - Severe : Business - Specific Successfully exploiting an overprivileged NHI requires the threat agent to first gain access to the environment. Therefore, Overprivileged NHI is dependent on a separate initial access vector. NHIs are very commonly over-privileged because right-sizing privileges for NHIs is a very difficult and time-consuming task. Detecting Overprivileged NHI is difficult given the challenges in understanding which of the NHI's privileges are actually being used by the underlying application. Overprivileged NHI impact is high due to the high amount of privileges associated. These tend to be admin accounts with widespread impact."},{"location":"5-overprivileged-nhi/#description","title":"Description","text":"<p>Non-human identities (NHIs)\u2014such as service accounts, API tokens, and workload identities\u2014are designed for programmatic access to cloud resources and services. They enable applications, services, and automated processes to function securely without human intervention. However, during application development and maintenance, developers or administrators may inadvertently assign NHIs excessive privileges beyond their functional requirements, unnecessarily expanding the potential blast radius in case of a compromise. When an over-privileged NHI is compromised\u2014whether through vulnerabilities in the application, malware, or other security breaches\u2014attackers can exploit the excessive permissions to:</p> <ul> <li>Access Sensitive Data: Unauthorized access to confidential files, databases, or user information.</li> <li>Escalate Privileges: Gain higher levels of access within the system, potentially reaching administrative or root levels.</li> <li>Move Laterally Within the Network: Access other systems or services within the organization's network that the NHI can reach.</li> <li>Install Malicious Software: Deploy malware, ransomware, or other malicious tools to further compromise the system.</li> <li>Entire cloud account takeover: Leak of identities related to cloud root account or administrator, could leak to full control and to account takeover.</li> </ul>"},{"location":"5-overprivileged-nhi/#example-attack-scenarios","title":"Example Attack Scenarios","text":"<ul> <li>Overprivileged Web Server User: A web server runs under a local user account on a Linux machine that also has access to other applications, system files, or sensitive data directories. If the web server has a vulnerability that allows remote code execution, an attacker could exploit this to gain control over the web server process. With the excessive permissions of the user account, the attacker could access or modify other applications, steal sensitive data, or make unauthorized system changes.</li> <li>Overprivileged VM: A Jenkins EC2 instance is mistakenly assigned the AWS AdministratorAccess managed policy, even though it only requires permissions for EKS and ECS. Exploiting a vulnerability on the instance, an attacker gains initial access, leverages the excessive privileges to navigate the cloud environment, and exfiltrates sensitive data from S3 buckets.</li> <li>Overprivileged OAuth Application: A developer installs the OAuth application that they are developing on a production Azure account and provides it with the AppRoleAssignment.ReadWriteAll privilege despite the App only requiring read access to a specific directory in Azure Blob Storage. This significantly increases the impact of the damage that a malicious entity can inflict if it gets a hold of that application.</li> <li>Database Service Account with Excessive Permissions: A managed database service operates with a service account that has administrative privileges on the account. If an attacker manages to get access to the database, they could use the service account's high-level permissions to access and perform actions on the entire cloud account.</li> <li>Unrestricted Application User with Broad Network Access: A database application operates with a service account that has administrative privileges on the server. If an attacker exploits a vulnerability in the database software, they could use the service account's high-level permissions to execute arbitrary commands, install malware, or create new user accounts, leading to full system compromise.</li> </ul>"},{"location":"5-overprivileged-nhi/#how-to-prevent","title":"How To Prevent","text":"<ul> <li>Enforce the principle of least privilege: Assign each identity only the permissions essential for its specific tasks, avoiding any form of administrative privileges unless absolutely necessary.</li> <li>Regularly audit and review permissions: Continuously assess the permissions granted to identities to ensure they are strictly necessary. Audit privileged identities to detect and address potential misuse or overprovisioning.</li> <li>Establish preventive guardrails: Implement deny policies at the organizational level to prohibit excessively permissive configurations and enforce strict access controls.</li> <li>Leverage Just-in-Time (JIT) access: Utilize tools that enable temporary, on-demand elevation of privileges, allowing for high-level access only when required and within a defined time frame.</li> </ul>"},{"location":"5-overprivileged-nhi/#references","title":"References","text":"<ul> <li>.env File Breach (August 2024) - link1, link2</li> <li>Microsoft Midnight Blizzard breach (January 2024) - link1, link2</li> <li>Microsoft SAS Token Breach (September 2023) - link</li> <li>CircleCI Breach (January 2023) - link</li> <li>Uber Breach (September 2022) - link</li> <li>Verkada Breach (March 2021) - link</li> </ul>"},{"location":"5-overprivileged-nhi/#data-points","title":"Data points","text":"<ul> <li>Datadog State of the Cloud 2024</li> <li>17.6% have excessive data access, such as listing and accessing data from all S3 buckets in the account</li> <li>10% of clusters have a dangerous node role that has full administrator access, allows for privilege escalation, has overly permissive data access (e.g., all S3 buckets), or allows for lateral movement across all workloads in the account</li> <li>Over one in three Google Cloud VMs (33%) have sensitive permissions to a project</li> <li>CSA NHI Report </li> <li>33% answers put over-privileged accounts as one of the top 3 most concerning NHI threats (3/10)</li> <li>37% of times over-privileged identities were the cause for NHI-related security incidents (2/10)</li> <li>22% of organizations need managing permissions as the most important capability of an NHI tool (5/16)</li> <li>26% of organizations believe that over 50% of their service accounts are over-privileged</li> <li>Orca Security State of the Cloud Security report 2022</li> <li>44% of environments have at least one privileged identity access management (IAM) role.</li> <li>23% have at least one EC2 Instance with Administrator IAM role.</li> </ul>"},{"location":"6-insecure-cloud-deployment-configurations/","title":"NHI6:2025 Insecure Cloud Deployment Configurations","text":"Threat Agents &amp; Attack Vectors Security Weakness Impact Exploitability: Average Prevalence: CommonDetectability: Easy Technical Impact: SevereBusiness: Specific Generally, discovering misconfigured pipelines is difficult because they are set up within the organization's confines. However, once a threat actor gains simple read access, they can relatively easily reconnoiter the environment and discover vulnerable configurations. Risks in managing CI/CD pipelines have gained awareness, and as a result, many CI/CD providers support OIDC-based access and push their users to use it. However, many organizations still need to catch up and use hard-coded credentials or insecure OIDC-based authentication.  The CI/CD misconfigurations happen on the organizations' \u201chome turf\u201d and thus are easy to search for. Furthermore, current known misconfigurations are well documented. Successfully compromising a CI/CD misconfiguration could lead to supply chain attacks or rogue access to environments, as most pipelines are granted high-privilege access."},{"location":"6-insecure-cloud-deployment-configurations/#description","title":"Description","text":"<p>Continuous Integration and Continuous Deployment (CI/CD) applications enable developers to automate the process of building, testing, and deploying code to production environments. These integrations often require the CI/CD pipelines to authenticate with cloud services, which is typically achieved using either dedicated service accounts with static credentials or OpenID Connect (OIDC) for federated identity management.</p> <p>Using dedicated service accounts with static credentials in CI/CD pipelines is considered insecure. Static credentials can be inadvertently exposed through code repositories, logs, or configuration files. If compromised, these credentials can provide attackers with persistent and potentially privileged access to production environments, bypassing multi-factor authentication (MFA) and other security measures.</p> <p>OIDC offers a more secure alternative by allowing CI/CD pipelines to obtain short-lived, dynamically generated tokens for authentication. However, misconfigurations in OIDC setups can introduce vulnerabilities. If the identity tokens are not properly validated or there are no strict conditions on token claims\u2014such as the <code>sub</code> (subject) claim\u2014unauthorized users might exploit these weaknesses to gain access to cloud resources.</p> <p>Proper configuration and management of CI/CD integrations are crucial to maintain the security of the production environment. This includes enforcing the principle of least privilege, implementing robust credential management practices, and ensuring that OIDC tokens are properly validated and restricted to authorized entities.</p>"},{"location":"6-insecure-cloud-deployment-configurations/#example-attack-scenarios","title":"Example Attack Scenarios","text":"<ul> <li> <p>AWS IAM Roles with Misconfigured OIDC Trust Relationships: AWS roles that allow OIDC access through <code>AssumeRoleWithWebIdentity</code> can be misconfigured if they trust public OIDC providers like GitHub or GitLab without properly restricting the <code>sub</code> claim. Without this restriction, any user on these platforms could potentially assume the role, leading to unauthorized access to AWS resources.</p> </li> <li> <p>Hard-Coded Azure Service Principal Credentials: An Azure Service Principal intended for use within a GitHub Action might have its credentials hard-coded into the pipeline's configuration files. If these files are stored in a publicly accessible repository or are otherwise exposed, attackers can obtain the credentials and authenticate as the service principal, gaining access to Azure resources with the associated permissions.</p> </li> </ul>"},{"location":"6-insecure-cloud-deployment-configurations/#how-to-prevent","title":"How To Prevent","text":"<ul> <li>Use OIDC for Secure Authentication</li> <li>Replace static credentials with short-lived, dynamically generated tokens using OIDC.</li> <li>Validate tokens strictly, including issuer, audience, and claims.</li> <li>Enforce Least Privilege</li> <li>Limit CI/CD pipeline permissions to only what is necessary.</li> <li>Restrict trust relationships in IAM roles and OIDC configurations.</li> <li>Avoid Hard-Coded Credentials</li> <li>Store secrets securely with tools like AWS Secrets Manager, Azure Key Vault, or HashiCorp Vault.</li> <li>Regularly scan repositories and configurations for exposed credentials.</li> </ul>"},{"location":"6-insecure-cloud-deployment-configurations/#references","title":"References","text":"<ul> <li> <p>Exploiting Misconfigured GitLab OIDC AWS IAM Roles</p> </li> <li> <p>Security Recommendations for AWS Access in GitHub Actions</p> </li> </ul>"},{"location":"6-insecure-cloud-deployment-configurations/#data-points","title":"Data Points","text":"<ul> <li>CSA NHI Report - 32% of times configuration error was the cause for NHI-related security incidents. (4/10)</li> </ul>"},{"location":"7-long-lived-secrets/","title":"NHI7:2025 Long-Lived Secrets","text":"<p>TBA</p>"},{"location":"8-environment-isolation/","title":"NHI8:2024 Environment Isolation NHI","text":"Threat agents/Attack vectors Security Weakness Impacts Exploitability - Average Prevalence - Uncommon : Detectability - Hard Technical - Moderate : Business - Specific Successfully exploiting an unisolated NHI requires the threat agent to first gain access to the test environment. That said, test environments tend to have significantly less protections in place than production environments. NHIs are not commonly re-used between non-prod and prod environments. Detecting unisolated NHI is difficult given the high variability of workload and environment permutations that can be using the same NHI. The impact of isolated NHI depends on the privilege of the associated NHI. Given that the associated NHI is, by nature, in a prod environment, the impact is non-negligible."},{"location":"8-environment-isolation/#description","title":"Description","text":"<p>Environment isolation is a fundamental security practice in cloud application deployment, where separate environments are used for development, testing, staging, and production. This separation ensures that issues in one environment do not affect others, particularly the production environment where real users and sensitive data reside. Non-human identities (NHIs), such as service accounts, API keys, and roles, are often utilized during the deployment process and throughout an application's lifecycle. However, reusing the same NHIs across multiple environments\u2014especially between testing and production\u2014can introduce significant security vulnerabilities. If an NHI used in a less secure testing environment has permissions to access production resources, an attacker who compromises the testing environment could leverage this NHI to infiltrate the production environment. To mitigate these risks, it is critical to enforce strict isolation of NHIs based on the environments in which they operate. This involves:</p> <ul> <li>Using Separate NHIs for Each Environment: Assign unique NHIs to each environment to prevent cross-environment access.</li> <li>Applying the Principle of Least Privilege: Limit NHIs' permissions to only what is necessary for their specific environment.</li> <li>Implementing Environment-Specific Access Controls: Ensure that NHIs in non-production environments cannot access production resources.</li> <li>Regular Auditing and Monitoring: Continuously monitor NHIs for any unauthorized access attempts or anomalies.</li> </ul> <p>By isolating environments and the NHIs associated with them, organizations can significantly reduce the attack surface and prevent potential breaches from propagating across environments.</p>"},{"location":"8-environment-isolation/#example-attack-scenarios","title":"Example Attack Scenarios","text":"<ul> <li>Shared AWS Access Keys Across Environments: An AWS access key is used in both testing and production environments to access Amazon S3 buckets. While intended for accessing mock data in the testing environment, the key also has permissions to access sensitive production data. If the testing environment is compromised, an attacker could use the shared access key to retrieve or manipulate production data, leading to data breaches or service disruptions.</li> <li>Shared Azure System-assigned Managed Identity across subscriptions: A system-assigned managed identity allows resources to use it both in a test subscription and a production subscription and has permissions to resources in both subscriptions. This configuration allows processes in the testing environment to access resources in the production environment. If an attacker gains access to the testing environment, they could exploit the managed identity gaining unauthorized access to critical resources and potentially compromising the entire production environment.</li> </ul>"},{"location":"8-environment-isolation/#how-to-prevent","title":"How To Prevent","text":"<ul> <li>Strict Environment Isolation for NHIs: Assign unique NHIs to each environment (development, testing, staging, production) to ensure that access credentials or identities in one environment cannot be reused in another.</li> <li>Apply the Principle of Least Privilege (PoLP): Grant NHIs only the minimal permissions required for their specific tasks within their designated environments. This minimizes the potential damage if an NHI is compromised.</li> <li>Enforce Environment-Specific Access Controls: Configure access policies so that NHIs in non-production environments (e.g., testing) cannot interact with or access resources in the production environment.</li> <li>Segregate Infrastructure for Sensitive Resources: Use separate resource groups, subscriptions, or accounts to isolate production from non-production environments. This ensures that even with an NHI compromise, the blast radius is limited to its environment.</li> </ul>"},{"location":"8-environment-isolation/#references","title":"References","text":"<ul> <li>AWS Recommendations on Workload Isolation</li> </ul>"},{"location":"8-environment-isolation/#data-points","title":"Data points","text":"<ul> <li>CSA NHI Report - 32% of times configuration error was the cause for NHI-related security incidents. (4/10)</li> </ul>"},{"location":"9-nhi-reuse/","title":"NHI9:2025 NHI Reuse","text":"Threat agents/Attack vectors Security Weakness Impacts Exploitability - Hard Prevalence - Widespread : Detectability - Hard Technical - Low : Business - Specific Successfully exploiting a Re-used NHI requires the threat agent to first gain access to the environment. Therefore, NHI Reuse is dependent on a separate initial access vector. NHIs are very commonly reused because tailor fitting NHI for each workload is difficult. Common cases include the use of a single AWS IAM Role for multiple workloads or the use of a single API key for multiple workloads. Detecting NHI reuse is difficult given the high variability of workloads that can be using the NHI. NHI Reuse impact depends on the privilege of the associated NHI. If least-privilege is adopted, this impact is Low."},{"location":"9-nhi-reuse/#description","title":"Description","text":"<p>Non-Human Identities (NHIs), such as service accounts, API keys, and machine credentials, play a critical role in enabling applications and services to authenticate and access necessary resources. However, reusing the same NHI across different applications, services, or components\u2014even if they are deployed together\u2014introduces significant security risks. If an NHI is compromised in one area, an attacker can exploit it to gain unauthorized access to other parts of the system that use the same credentials. </p> <p>In addition to these risks, the reuse of NHIs can complicate breach mitigation actions and impact audits.   </p> <p>To minimize these risks, it's essential to assign unique NHIs to each application or service. This approach adheres to the principle of least privilege, ensuring that each NHI has only the permissions necessary for its specific function. By isolating NHIs, organizations can contain potential breaches and prevent attackers from moving laterally within the environment.</p>"},{"location":"9-nhi-reuse/#examples","title":"Examples","text":"<ul> <li>Kubernetes Service Account Reuse: In a Kubernetes cluster, multiple pods can share the same Kubernetes service account, including critical pods responsible for orchestration tasks. If one pod has a vulnerability and gets compromised, an attacker can use the shared service account to perform actions across the cluster. This could lead to unauthorized access to sensitive data, manipulation of workloads, or even full control over the cluster's resources.</li> <li>Shared API Keys Between Applications: An organization uses the same API key for multiple applications to access a third-party service. If one application is compromised and the API key is exposed, the attacker can use it to access or manipulate data across all applications that use the shared key, potentially leading to a widespread breach.</li> <li>Reused Cloud Credentials: Different services within an organization utilize the same cloud credentials (e.g., AWS IAM roles, Azure service principals) to interact with cloud resources. If an attacker obtains these credentials from a less secure service, they can access critical resources used by more secure services, bypassing isolation mechanisms and escalating the attack.</li> </ul>"},{"location":"9-nhi-reuse/#how-to-prevent","title":"How To Prevent","text":"<ul> <li>Assign Unique NHIs to Each Application or Service</li> <li>Ensure that each logical system component is granted a unique NHI which it operates under</li> <li>Ensure that the ability to authenticate as the assigned NHI is limited to the associated system component</li> <li>Assign Unique NHIs in Each Environment</li> <li>Ensure that each logical environment uses distinct NHIs when interacting with other systems or environments</li> <li>Enforce the Principle of Least Privilege</li> <li>Ensure that NHIs are only granted the minimal level of access required for their function</li> <li>Audit and Review the Use of NHIs</li> <li>Audit all NHIs along with their access grants and assigned system components</li> <li>Review, on a regular basis, that NHIs are not reused and that they continue to follow the principle of least privilege for their function</li> </ul>"},{"location":"9-nhi-reuse/#references","title":"References","text":"<ul> <li>Kubernetes: Managing Service Accounts</li> <li>OWASP: Principle of Least Privilege</li> <li>AWS Identity and Access Management Best Practices</li> <li>Azure Service Principal Security</li> <li>Google Cloud: Best Practices for Managing Service Accounts</li> <li>Chronicle cross-customer bucket access</li> </ul>"},{"location":"9-nhi-reuse/#risk-scoring","title":"Risk Scoring","text":"<ul> <li>Threat agents/Attack vectors<ul> <li>Exploitability - Hard. Successfully exploiting a Re-used NHI requires the threat agent to first gain access to the environment. Therefore, NHI Reuse is dependent on a separate initial access vector.</li> </ul> </li> <li>Security Weakness<ul> <li>Prevalence - Widespread. NHIs are very commonly reused because tailor fitting NHI for each workload is difficult. Common cases include the use of a single AWS IAM Role for multiple workloads or the use of a single API key for multiple workloads.</li> <li>Detectability - Hard. Detecting NHI reuse is difficult given the high variability of workloads that can be using the NHI.</li> </ul> </li> <li>Impacts<ul> <li>Technical - Low. NHI Reuse impact depends on the privilege of the associated NHI. If least-privilege is adopted, this impact is Low.</li> <li>Business - Specific.</li> </ul> </li> </ul>"},{"location":"9-nhi-reuse/#data-points","title":"Data Points","text":"<ul> <li>Cloud Vulnerability Database - Chronicle cross-customer bucket access</li> <li>CSA NHI Report - 14% of organizations need consumer identification as the most important capability of an NHI tool. (11/16)</li> <li>Recent Breach - .env file Breach - link</li> </ul>"},{"location":"acknowledgments/","title":"Acknowledgments","text":"<p>TBA</p>"},{"location":"introduction/","title":"Introduction","text":""},{"location":"introduction/#what-are-non-human-identities-nhis","title":"What Are Non-Human Identities (NHIs)?","text":"<p>Non-human identities (NHIs) are used to provide authorization to software entities such as applications, APIs, bots, and automated systems to access secured resources. Unlike human identities, NHIs are not controlled or directly owned by a human. Their identity object and authentication often work differently to human, and common human user security measures do not apply to them.</p> <p>Examples of NHIs include:</p> <ul> <li>API keys used by microservices to access database applications.</li> <li>Service accounts in backend systems connecting multiple subsystems.</li> <li>Roles assocaited with automated services to access cloud resources.</li> <li>Tokens used by bots to access protected application resources.</li> </ul> <p>As modern software becomes increasingly automated and interconnected, NHIs have become essential to application development.</p>"},{"location":"introduction/#the-importance-of-securing-nhis","title":"The Importance of Securing NHIs","text":"<p>Mismanagement of NHIs introduces significant security risks. Key issues include:</p> <ul> <li>Excessive Permissions: NHIs are commonly granted very broad access to resources which leads to a widespread damage if compromised.</li> <li>Credential Mismanagement: NHI credentials can easily be wrongly managed: leaving hardcoded keys in code, poor or no rotation policies, and usage of deprecated authentication method make NHI vulnerable to compromise. </li> <li>Lack of Monitoring: NHIs are notoriously under-monitored, allowing malicious activity to go unnoticed.</li> </ul> <p>The key issues above make it so a compromised NHIs can lead to unauthorized access, data breaches, or attacks on infrastructure. With NHIs playing critical roles in development pipelines, cloud environments, and SaaS ecosystems, securing them is essential.</p>"},{"location":"introduction/#examples-of-risks-and-breaches","title":"Examples of Risks and Breaches","text":"<p>In recent worlds, with the increase of prevalence in using NHIs, real-world incidents involving a compromised NHI have grown exponentially. Some of the highest profile incidents are presented below and demonstrate the risks of insecure NHIs:</p> <ul> <li>Microsoft's Midnight Blizzard Breach (January 2024): A nation-state actor, Midnight Blizzard, initiated an attack against Microsoft's tenant. After gaining access to a non-production Microsoft 365 test tenant, they exploited a legacy OAuth application \u2014 an unmanaged non-human identity \u2014 with full privileges to access Microsoft's production environment. This led to unauthorized access to corporate email accounts, resulting in the exfiltration of sensitive communications and documents. </li> <li>Okta's Support System Breach (November 2023): Okta has experienced a security breach involving a compromised service account. An employee had saved the credentials for this service account to their personal Google account after signing in on an Okta-managed device. The compromise of the employee's personal Google account allowed attackers to obtain these credentials, granting unauthorized access to Okta's customer support system. The attackers accessed files related to 134 customers, including HTTP Archive (HAR) files containing sensitive data like session tokens.</li> <li>Internet Archive's Zendesk Support Platform Breach (October 2024): Attackers exploited unrotated access tokens tied to the Internet Archive's Zendesk support platform, leading to unauthorized access and potential data exposure.  This incident highlights the importance of regularly rotating and securing non-human identity credentials to prevent unauthorized access. </li> </ul>"},{"location":"introduction/#about-the-owasp-nhi-top-10-project","title":"About the OWASP NHI Top 10 Project","text":"<p>The OWASP Non-Human Identity (NHI) Top 10 identifies and ranks the most critical risks associated with NHIs, providing a practical guide for developers and organizations. </p>"},{"location":"introduction/#why-this-project-matters","title":"Why This Project Matters","text":"<p>As NHIs become more prevalent, securing them has become as important as protecting human users. This project aims to:</p> <ul> <li>Raise awareness of NHI-related security challenges.</li> <li>Offer actionable insights for securing NHIs from their most dangerous risks.</li> <li>Help developers and organizations prioritize risks and implement best practices.</li> </ul>"},{"location":"introduction/#how-we-built-the-list","title":"How We Built the List","text":"<p>We identified key risks through real-world incidents, surveys, CVE databases, and industry input. Using the collected data and based on the OWASP Risk Rating Methodology, we ranked the top 10 risks to provide a clear prioritized list.</p>"},{"location":"introduction/#what-developers-should-do","title":"What Developers Should Do","text":"<p>Developers can use this project to:</p> <ol> <li>Understand the risks associated with NHIs in their applications.</li> <li>Apply the recommended practices to secure NHIs and mitigate threats.</li> <li>Monitor and improve their NHI security continuously.</li> </ol>"},{"location":"methodology-and-data/","title":"Methodology and Data","text":"<p>TBD</p>"},{"location":"ranking-criteria/","title":"Ranking Criteria","text":"<p>TBD</p>"},{"location":"release-notes/","title":"Release Notes","text":"<p>TBD</p>"},{"location":"table-of-contents/","title":"Table of Contents","text":"<ul> <li>Table of Contents</li> <li>Introduction</li> <li>Ranking Criteria</li> <li>Methodology and Data</li> <li>OWASP Non-Human Identities Top 10 - 2025</li> <li>NHI1:2025 Improper Offboarding</li> <li>NHI2:2025 Secret Leakage</li> <li>NHI3:2025 Vulnerable Third-Party NHI</li> <li>NHI4:2025 Insecure Authentication</li> <li>NHI5:2025 Overprivileged NHI</li> <li>NHI6:2025 Insecure Cloud Deployment Configurations</li> <li>NHI7:2025 Long-Lived Secrets</li> <li>NHI8:2025 Environment Isolation</li> <li>NHI9:2025 NHI Reuse</li> <li>NHI10:2025 Human Use of NHI</li> <li>Acknowledgments</li> </ul>"},{"location":"top-10-2025/","title":"OWASP Non-Human Identities Top 10 - 2025","text":"<p>TBD</p>"}]}